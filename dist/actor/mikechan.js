"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{return Promise.resolve(value).then(function(value){return step("next",value);},function(err){return step("throw",err);});}}return step("next");});};}const botName="akeno_m";exports.default={asUser:true,actorList:[// 起動時もしくはチャンネル作成時に参加していない全てのチャンネルに参加を試みる
{filter(messageInfo,alreadyCalled){var _messageInfo$messageO=messageInfo.messageObject;const type=_messageInfo$messageO.type;const subtype=_messageInfo$messageO.subtype;return type==="hello"||type==="channel_created";},action(messageInfo,ownerToken){var _this=this;return _asyncToGenerator(function*(){const channelList=(yield _this.getChannels()).channels;const userInfo=yield _this.getUser(botName);const _token=_this.token;try{_this.token=ownerToken;for(const channel of channelList){if(channel.is_member)continue;yield _this._api("channels.invite",{channel:channel.id,user:userInfo.id});}}finally{_this.token=_token;}return true;})();}},// そのチャンネルに所属しないメンバーを全員呼んでくる
{filter(messageInfo,alreadyCalled){var _messageInfo$messageO2=messageInfo.messageObject;const type=_messageInfo$messageO2.type;const subtype=_messageInfo$messageO2.subtype;const text=_messageInfo$messageO2.text;const reply=messageInfo.symbols.reply;if(type!=="message")return false;if(subtype)return false;if(!(reply.indexOf("akeno_m")!==-1))return false;return /((皆|みんな)|(全員|ぜんいん)).*([呼よ](べ|んで)|(集合|しゅ[うー]ご[うー]))/.test(text);},action(messageInfo,ownerToken){var _this2=this;return _asyncToGenerator(function*(){var _messageInfo$messageO3=messageInfo.messageObject;const channelId=_messageInfo$messageO3.channel;const user=_messageInfo$messageO3.user;const userList=(yield _this2.getUsers()).members;const channelInfo=(yield _this2.getChannelById(channelId)).channel;if(!channelInfo)return;const _token=_this2.token;try{_this2.token=ownerToken;for(const user of userList){if(channelInfo.members.indexOf(user.id)!==-1)continue;yield _this2._api("channels.invite",{channel:channelId,user:user.id});}}finally{_this2.token=_token;}return{channelId,replyTo:user,text:"みんなを呼んできたよ♪"};})();}},// リプライにはランダムな応答を行う
{filter(messageInfo,alreadyCalled){var _messageInfo$messageO4=messageInfo.messageObject;const type=_messageInfo$messageO4.type;const subtype=_messageInfo$messageO4.subtype;const text=_messageInfo$messageO4.text;const reply=messageInfo.symbols.reply;if(type!=="message")return false;if(subtype)return false;if(alreadyCalled)return false;return reply.indexOf("akeno_m")!==-1;},action(messageInfo,ownerToken){return _asyncToGenerator(function*(){var _messageInfo$messageO5=messageInfo.messageObject;const channelId=_messageInfo$messageO5.channel;const user=_messageInfo$messageO5.user;const wordList=["えへへっ","よーそろー！","わたし、岬明乃！","ちゃんと艦長出来てるかなぁ…？"];return{channelId,replyTo:user,text:wordList[Math.random()*wordList.length|0]};})();}}]};module.exports=exports["default"];