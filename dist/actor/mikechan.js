"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _client=require("@slack/client");function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{return Promise.resolve(value).then(function(value){return step("next",value);},function(err){return step("throw",err);});}}return step("next");});};}const username="akeno_m";exports.default={username,asUser:true,actorList:[// 起動時もしくはチャンネル作成時に参加していない全てのチャンネルに参加を試みる
{filter(message,entities,alreadyCalled){const type=message.type;const subtype=message.subtype;return type===_client.RTM_EVENTS.HELLO||type===_client.RTM_EVENTS.CHANNEL_CREATED;},action(message,entities,ownerClient){var _this=this;return _asyncToGenerator(function*(){let ownerInfo;for(const _ref of Object.entries(_this.dataStore.channels)){var _ref2=_slicedToArray(_ref,2);const channel=_ref2[0];const channelInfo=_ref2[1];// 既に参加していたらスルー
if(channelInfo.is_member)continue;// オーナー情報を取得する(キャッシュを行う)
ownerInfo=ownerInfo||(yield new Promise(function(resolve,reject){ownerClient.auth.test(function(err,res){if(err)reject(err);resolve(res);});}));// オーナーが参加してない場合は、スルー
if(!(channelInfo.members.indexOf(ownerInfo.user_id)!==-1))continue;// オーナー権限でbotを招待する
yield new Promise(function(resolve,reject){ownerClient.channels.invite({channel,user:_this.activeUserId},function(err,res){if(err)reject(err);resolve(res);});});}return true;})();}},// そのチャンネルに所属しないメンバーを全員呼んでくる
{filter(message,entities,alreadyCalled){const type=message.type;const subtype=message.subtype;const text=message.text;const reply=entities.reply;if(type!==_client.RTM_EVENTS.MESSAGE)return false;if(subtype)return false;if(!~reply.findIndex(user=>user.name===username))return false;return /((皆|みんな)|(全員|ぜんいん)).*([呼よ](ぶ|べ|ぼう|んで)|(集合|しゅ[うー]ご[うー]))/.test(text);},action(message,entities,ownerClient){var _this2=this;return _asyncToGenerator(function*(){const channel=message.channel;const user=message.user;const channelInfo=_this2.dataStore.getChannelById(channel);if(!channelInfo)return;for(const user of Object.keys(_this2.dataStore.users)){// 既に参加していたらスルー
if(channelInfo.members.indexOf(user)!==-1)continue;// オーナー権限でメンバーを招待する
yield new Promise(function(resolve,reject){ownerClient.channels.invite({channel:channelInfo.id,user},function(err,res){if(err)reject(err);resolve(res);});});}return{channel,replyTo:user,text:"みんなを呼んできたよ♪"};})();}},// リプライにはランダムな応答を行う
{filter(message,entities,alreadyCalled){const type=message.type;const subtype=message.subtype;const text=message.text;const reply=entities.reply;if(type!==_client.RTM_EVENTS.MESSAGE)return false;if(subtype)return false;if(alreadyCalled)return false;return~reply.findIndex(user=>user.name===username);},action(message,entities,ownerClient){return _asyncToGenerator(function*(){const channel=message.channel;const user=message.user;const wordList=["えへへっ","よーそろー！","わたし、岬明乃！","ちゃんと艦長出来てるかなぁ…？"];return{channel,replyTo:user,text:wordList[Math.random()*wordList.length|0]};})();}}]};module.exports=exports["default"];